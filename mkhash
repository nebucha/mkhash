#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
import re
import hashlib
import codecs

_usage = [ "mkhash [-d] type field [file]" ]
_version = "Mon Apr  8 18:29:16 JST 2019"
_support_type = ['md5','sha1','sha224','sha256','sha384','sha512'];
_options = [ "type\thash type", 
            "field\ttarget field number", 
            "file\ttarget filename", 
            "-d\tdirect mode" ];

def die(msg):
	sys.stderr.write( 'Error[mkhash] : ' + msg + "\n")
	sys.exit(1)

def usage():
	sys.stderr.write("Usage	: \n")
	sys.stderr.write("	Make a hash of specified field string, and insert after the field.\n")
	sys.stderr.write("	In direct mode, it doesn't keep the original string.\n")
	sys.stderr.write("	If the target filename is ommited, standard input will be used.\n")
	sys.stderr.write("\n")
	sys.stderr.write("	Supported hash type: " + ' '.join(map(str, _support_type)) + "\n\n")
	sys.stderr.write("	" + _usage[0] + "\n")
	sys.stderr.write("		" + _options[0] + "\n")
	sys.stderr.write("		" + _options[1] + "\n")
	sys.stderr.write("		" + _options[2] + "\n")
	sys.stderr.write("		" + _options[3] + "\n")
	sys.stderr.write("Version	: " + _version + "\n")
	sys.exit(1)

def openReadFile(file_name):
	if file_name != "-":
		try:    return codecs.open(file_name,'r','utf-8')
		except: die("Can't open the file.")

	if sys.version_info[0] < 3:
		return codecs.getreader('utf-8')(sys.stdin)

	return codecs.getreader('utf-8')(sys.stdin.detach())

def isFile(opt):
	# Determine the string that to handle as a file
	# If file string, retuen true. Otherwise, return False.
	
	# Absolute path
	if opt[0] == "/": return True
	# Relative path
	if opt[0] == ".": return True

	# Options
	if opt[0] == "-": return False

	for tkn in opt.split("/"):
		p = re.compile('^[0-9]+$')
		ret = p.match(tkn)
		if ret != None: return False

	return True
	

def calc_hash(string, htype):
    # Generate the hash of the specified string
    if htype == 'md5':
       hashstr = hashlib.md5(string).hexdigest()
    elif htype == 'sha1':
       hashstr = hashlib.sha1(string).hexdigest()
    elif htype == 'sha224':
       hashstr = hashlib.sha224(string).hexdigest()
    elif htype == 'sha256':
       hashstr = hashlib.sha256(string).hexdigest()
    elif htype == 'sha384':
       hashstr = hashlib.sha384(string).hexdigest()
    elif htype == 'sha512':
       hashstr = hashlib.sha512(string).hexdigest()
    else:
       return -1

    return hashstr

if __name__ == '__main__':
    if len(sys.argv) <= 2 : usage()

    # Prepare the I/O (Determine if the last option is a file)
    if isFile(sys.argv[-1]):
        input_file = openReadFile(sys.argv[-1])
        argv = sys.argv[1:-1]
    else:
        input_file = openReadFile("-")
        argv = sys.argv[1:]

    # Check if directmode
    if argv[0] == '-d':
	directmode = True
        argv = argv[1:]
    else:
        directmode = False

    htype = argv[0]
    column = int(argv[1]) - 1

    if not htype in _support_type:
        die("Unsupported type.")

    line = input_file.readline().rstrip('\r\n')

    while line:
        row = line.split(' ')
        hashstr = calc_hash(row[column], htype.lower())
        if hashstr != -1:
            if directmode:
                row[column] = hashstr
            else:
                row.insert(column+1, hashstr)
            print(' '.join(map(str, row)))
            line = input_file.readline().rstrip('\r\n')
        else:
            input_file.close()
            die("Unsupported type.")

    input_file.close()

